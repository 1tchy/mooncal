package logics;

import org.junit.Test;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Comparator;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;

public class SupportedTimeZoneTest {
    private static final LocalDateTime JUNE_DATE = LocalDateTime.of(2015, 6, 30, 0, 0, 0);
    private static final LocalDateTime DECEMBER_DATE = LocalDateTime.of(2015, 12, 30, 0, 0, 0);

    @Test
    public void supportedTimeZones() {
        assertEquals("Etc/GMT+12\nPacific/Midway\nPacific/Niue\nPacific/Pago_Pago\nPacific/Samoa\nUS/Samoa\nPacific/Honolulu\nPacific/Johnston\nPacific/Rarotonga\nPacific/Tahiti\nUS/Hawaii\nAmerica/Adak\nAmerica/Atka\nPacific/Marquesas\nUS/Aleutian\nPacific/Gambier\nAmerica/Anchorage\nAmerica/Juneau\nAmerica/Metlakatla\nAmerica/Nome\nAmerica/Sitka\nAmerica/Yakutat\nUS/Alaska\nPacific/Pitcairn\nAmerica/Dawson\nAmerica/Ensenada\nAmerica/Los_Angeles\nAmerica/Santa_Isabel\nAmerica/Tijuana\nAmerica/Vancouver\nAmerica/Whitehorse\nCanada/Pacific\nCanada/Yukon\nMexico/BajaNorte\nPST8PDT\nUS/Pacific\nAmerica/Creston\nAmerica/Dawson_Creek\nAmerica/Fort_Nelson\nAmerica/Hermosillo\nAmerica/Phoenix\nUS/Arizona\nAmerica/Boise\nAmerica/Cambridge_Bay\nAmerica/Chihuahua\nAmerica/Ciudad_Juarez\nAmerica/Denver\nAmerica/Edmonton\nAmerica/Inuvik\nAmerica/Mazatlan\nAmerica/Ojinaga\nAmerica/Shiprock\nAmerica/Yellowknife\nCanada/Mountain\nMST7MDT\nMexico/BajaSur\nNavajo\nUS/Mountain\nAmerica/Belize\nAmerica/Costa_Rica\nAmerica/El_Salvador\nAmerica/Guatemala\nAmerica/Managua\nAmerica/Regina\nAmerica/Swift_Current\nAmerica/Tegucigalpa\nCanada/Saskatchewan\nPacific/Galapagos\nAmerica/Bahia_Banderas\nAmerica/Chicago\nAmerica/Indiana/Knox\nAmerica/Indiana/Tell_City\nAmerica/Knox_IN\nAmerica/Matamoros\nAmerica/Menominee\nAmerica/Merida\nAmerica/Mexico_City\nAmerica/Monterrey\nAmerica/North_Dakota/Beulah\nAmerica/North_Dakota/Center\nAmerica/North_Dakota/New_Salem\nAmerica/Rainy_River\nAmerica/Rankin_Inlet\nAmerica/Resolute\nAmerica/Winnipeg\nCST6CDT\nCanada/Central\nMexico/General\nUS/Central\nUS/Indiana-Starke\nAmerica/Atikokan\nAmerica/Bogota\nAmerica/Cancun\nAmerica/Cayman\nAmerica/Coral_Harbour\nAmerica/Eirunepe\nAmerica/Guayaquil\nAmerica/Jamaica\nAmerica/Lima\nAmerica/Panama\nAmerica/Porto_Acre\nAmerica/Rio_Branco\nBrazil/Acre\nChile/EasterIsland\nJamaica\nPacific/Easter\nAmerica/Caracas\nAmerica/Detroit\nAmerica/Fort_Wayne\nAmerica/Havana\nAmerica/Indiana/Indianapolis\nAmerica/Indiana/Marengo\nAmerica/Indiana/Petersburg\nAmerica/Indiana/Vevay\nAmerica/Indiana/Vincennes\nAmerica/Indiana/Winamac\nAmerica/Indianapolis\nAmerica/Iqaluit\nAmerica/Kentucky/Louisville\nAmerica/Kentucky/Monticello\nAmerica/Louisville\nAmerica/Montreal\nAmerica/Nassau\nAmerica/New_York\nAmerica/Nipigon\nAmerica/Pangnirtung\nAmerica/Port-au-Prince\nAmerica/Thunder_Bay\nAmerica/Toronto\nCanada/Eastern\nCuba\nEST5EDT\nUS/East-Indiana\nUS/Eastern\nUS/Michigan\nAmerica/Anguilla\nAmerica/Antigua\nAmerica/Aruba\nAmerica/Barbados\nAmerica/Blanc-Sablon\nAmerica/Boa_Vista\nAmerica/Curacao\nAmerica/Dominica\nAmerica/Grand_Turk\nAmerica/Grenada\nAmerica/Guadeloupe\nAmerica/Guyana\nAmerica/Kralendijk\nAmerica/La_Paz\nAmerica/Lower_Princes\nAmerica/Manaus\nAmerica/Marigot\nAmerica/Martinique\nAmerica/Montserrat\nAmerica/Port_of_Spain\nAmerica/Porto_Velho\nAmerica/Puerto_Rico\nAmerica/Santo_Domingo\nAmerica/St_Barthelemy\nAmerica/St_Kitts\nAmerica/St_Lucia\nAmerica/St_Thomas\nAmerica/St_Vincent\nAmerica/Tortola\nAmerica/Virgin\nBrazil/West\nAmerica/Asuncion\nAmerica/Campo_Grande\nAmerica/Cuiaba\nAmerica/Glace_Bay\nAmerica/Goose_Bay\nAmerica/Halifax\nAmerica/Moncton\nAmerica/Thule\nAtlantic/Bermuda\nCanada/Atlantic\nAmerica/Araguaina\nAmerica/Argentina/Buenos_Aires\nAmerica/Argentina/Catamarca\nAmerica/Argentina/ComodRivadavia\nAmerica/Argentina/Cordoba\nAmerica/Argentina/Jujuy\nAmerica/Argentina/La_Rioja\nAmerica/Argentina/Mendoza\nAmerica/Argentina/Rio_Gallegos\nAmerica/Argentina/Salta\nAmerica/Argentina/San_Juan\nAmerica/Argentina/San_Luis\nAmerica/Argentina/Tucuman\nAmerica/Argentina/Ushuaia\nAmerica/Bahia\nAmerica/Belem\nAmerica/Buenos_Aires\nAmerica/Catamarca\nAmerica/Cayenne\nAmerica/Cordoba\nAmerica/Fortaleza\nAmerica/Jujuy\nAmerica/Maceio\nAmerica/Mendoza\nAmerica/Montevideo\nAmerica/Paramaribo\nAmerica/Punta_Arenas\nAmerica/Recife\nAmerica/Rosario\nAmerica/Santarem\nAmerica/Santiago\nAmerica/St_Johns\nAntarctica/Palmer\nAntarctica/Rothera\nAtlantic/Stanley\nCanada/Newfoundland\nChile/Continental\nAmerica/Godthab\nAmerica/Miquelon\nAmerica/Nuuk\nAmerica/Sao_Paulo\nBrazil/East\nAmerica/Noronha\nAtlantic/South_Georgia\nBrazil/DeNoronha\nAtlantic/Cape_Verde\nAmerica/Scoresbysund\nAtlantic/Azores\nAfrica/Abidjan\nAfrica/Accra\nAfrica/Bamako\nAfrica/Banjul\nAfrica/Bissau\nAfrica/Casablanca\nAfrica/Conakry\nAfrica/Dakar\nAfrica/El_Aaiun\nAfrica/Freetown\nAfrica/Lome\nAfrica/Monrovia\nAfrica/Nouakchott\nAfrica/Ouagadougou\nAfrica/Sao_Tome\nAfrica/Timbuktu\nAmerica/Danmarkshavn\nAtlantic/Reykjavik\nAtlantic/St_Helena\nGMT\nGMT0\nGreenwich\nIceland\nUCT\nUTC\nUniversal\nZulu\nAtlantic/Canary\nAtlantic/Faeroe\nAtlantic/Faroe\nAtlantic/Madeira\nEire\nEurope/Belfast\nEurope/Dublin\nEurope/Guernsey\nEurope/Isle_of_Man\nEurope/Jersey\nEurope/Lisbon\nEurope/London\nGB\nGB-Eire\nPortugal\nWET\nAfrica/Algiers\nAfrica/Bangui\nAfrica/Brazzaville\nAfrica/Douala\nAfrica/Kinshasa\nAfrica/Lagos\nAfrica/Libreville\nAfrica/Luanda\nAfrica/Malabo\nAfrica/Ndjamena\nAfrica/Niamey\nAfrica/Porto-Novo\nAfrica/Tunis\nAntarctica/Troll\nAfrica/Ceuta\nAfrica/Windhoek\nArctic/Longyearbyen\nAtlantic/Jan_Mayen\nCET\nEurope/Amsterdam\nEurope/Andorra\nEurope/Belgrade\nEurope/Berlin\nEurope/Bratislava\nEurope/Brussels\nEurope/Budapest\nEurope/Busingen\nEurope/Copenhagen\nEurope/Gibraltar\nEurope/Ljubljana\nEurope/Luxembourg\nEurope/Madrid\nEurope/Malta\nEurope/Monaco\nEurope/Oslo\nEurope/Paris\nEurope/Podgorica\nEurope/Prague\nEurope/Rome\nEurope/San_Marino\nEurope/Sarajevo\nEurope/Skopje\nEurope/Stockholm\nEurope/Tirane\nEurope/Vaduz\nEurope/Vatican\nEurope/Vienna\nEurope/Warsaw\nEurope/Zagreb\nEurope/Zurich\nMET\nPoland\nAfrica/Blantyre\nAfrica/Bujumbura\nAfrica/Cairo\nAfrica/Gaborone\nAfrica/Harare\nAfrica/Johannesburg\nAfrica/Kigali\nAfrica/Lubumbashi\nAfrica/Lusaka\nAfrica/Maputo\nAfrica/Maseru\nAfrica/Mbabane\nAfrica/Tripoli\nEgypt\nEurope/Kaliningrad\nLibya\nAsia/Amman\nAsia/Beirut\nAsia/Damascus\nAsia/Famagusta\nAsia/Gaza\nAsia/Hebron\nAsia/Istanbul\nAsia/Jerusalem\nAsia/Nicosia\nAsia/Tel_Aviv\nEET\nEurope/Athens\nEurope/Bucharest\nEurope/Chisinau\nEurope/Helsinki\nEurope/Istanbul\nEurope/Kiev\nEurope/Kyiv\nEurope/Mariehamn\nEurope/Nicosia\nEurope/Riga\nEurope/Sofia\nEurope/Tallinn\nEurope/Tiraspol\nEurope/Uzhgorod\nEurope/Vilnius\nEurope/Zaporozhye\nIsrael\nTurkey\nAfrica/Addis_Ababa\nAfrica/Asmara\nAfrica/Asmera\nAfrica/Dar_es_Salaam\nAfrica/Djibouti\nAfrica/Juba\nAfrica/Kampala\nAfrica/Khartoum\nAfrica/Mogadishu\nAfrica/Nairobi\nAntarctica/Syowa\nAsia/Aden\nAsia/Baghdad\nAsia/Bahrain\nAsia/Kuwait\nAsia/Qatar\nAsia/Riyadh\nEurope/Astrakhan\nEurope/Kirov\nEurope/Minsk\nEurope/Moscow\nEurope/Saratov\nEurope/Simferopol\nEurope/Ulyanovsk\nEurope/Volgograd\nIndian/Antananarivo\nIndian/Comoro\nIndian/Mayotte\nW-SU\nAsia/Dubai\nAsia/Muscat\nAsia/Tbilisi\nAsia/Tehran\nAsia/Yerevan\nEurope/Samara\nIndian/Mahe\nIndian/Mauritius\nIndian/Reunion\nIran\nAsia/Baku\nAsia/Kabul\nAntarctica/Mawson\nAsia/Aqtau\nAsia/Aqtobe\nAsia/Ashgabat\nAsia/Ashkhabad\nAsia/Atyrau\nAsia/Dushanbe\nAsia/Karachi\nAsia/Oral\nAsia/Samarkand\nAsia/Tashkent\nAsia/Yekaterinburg\nIndian/Kerguelen\nIndian/Maldives\nAsia/Calcutta\nAsia/Colombo\nAsia/Kolkata\nAsia/Kathmandu\nAsia/Katmandu\nAsia/Almaty\nAsia/Barnaul\nAsia/Bishkek\nAsia/Dacca\nAsia/Dhaka\nAsia/Kashgar\nAsia/Novosibirsk\nAsia/Omsk\nAsia/Qostanay\nAsia/Qyzylorda\nAsia/Thimbu\nAsia/Thimphu\nAsia/Tomsk\nAsia/Urumqi\nIndian/Chagos\nAsia/Rangoon\nAsia/Yangon\nIndian/Cocos\nAntarctica/Davis\nAntarctica/Vostok\nAsia/Bangkok\nAsia/Ho_Chi_Minh\nAsia/Jakarta\nAsia/Krasnoyarsk\nAsia/Novokuznetsk\nAsia/Phnom_Penh\nAsia/Pontianak\nAsia/Saigon\nAsia/Vientiane\nIndian/Christmas\nAsia/Hovd\nAntarctica/Casey\nAsia/Brunei\nAsia/Chita\nAsia/Chongqing\nAsia/Chungking\nAsia/Harbin\nAsia/Hong_Kong\nAsia/Irkutsk\nAsia/Kuala_Lumpur\nAsia/Kuching\nAsia/Macao\nAsia/Macau\nAsia/Makassar\nAsia/Manila\nAsia/Shanghai\nAsia/Singapore\nAsia/Taipei\nAsia/Ujung_Pandang\nAustralia/Perth\nAustralia/West\nHongkong\nPRC\nSingapore\nAsia/Choibalsan\nAsia/Ulaanbaatar\nAsia/Ulan_Bator\nAsia/Pyongyang\nAustralia/Eucla\nAsia/Dili\nAsia/Jayapura\nAsia/Khandyga\nAsia/Seoul\nAsia/Tokyo\nAsia/Yakutsk\nJapan\nPacific/Palau\nROK\nAustralia/Darwin\nAustralia/North\nAntarctica/DumontDUrville\nAsia/Magadan\nAsia/Sakhalin\nAsia/Ust-Nera\nAsia/Vladivostok\nAustralia/Adelaide\nAustralia/Brisbane\nAustralia/Broken_Hill\nAustralia/Lindeman\nAustralia/Queensland\nAustralia/South\nAustralia/Yancowinna\nPacific/Chuuk\nPacific/Guam\nPacific/Port_Moresby\nPacific/Saipan\nPacific/Truk\nPacific/Yap\nAntarctica/Macquarie\nAustralia/ACT\nAustralia/Canberra\nAustralia/Currie\nAustralia/Hobart\nAustralia/Melbourne\nAustralia/NSW\nAustralia/Sydney\nAustralia/Tasmania\nAustralia/Victoria\nAustralia/LHI\nAustralia/Lord_Howe\nAsia/Srednekolymsk\nPacific/Bougainville\nPacific/Efate\nPacific/Guadalcanal\nPacific/Kosrae\nPacific/Noumea\nPacific/Pohnpei\nPacific/Ponape\nPacific/Norfolk\nAsia/Anadyr\nAsia/Kamchatka\nKwajalein\nPacific/Funafuti\nPacific/Kwajalein\nPacific/Majuro\nPacific/Nauru\nPacific/Tarawa\nPacific/Wake\nPacific/Wallis\nAntarctica/McMurdo\nAntarctica/South_Pole\nNZ\nPacific/Auckland\nPacific/Fiji\nPacific/Enderbury\nPacific/Fakaofo\nPacific/Kanton\nPacific/Tongatapu\nNZ-CHAT\nPacific/Chatham\nPacific/Apia\nPacific/Kiritimati",
                ZoneId.getAvailableZoneIds().stream()
                        .filter(zoneId -> !zoneId.startsWith("ical4j"))
                        .map(ZoneInfo::new)
                        .collect(Collectors.groupingBy(ZoneInfo::zoneOffsets))
                        .values().stream()
                        .flatMap(zoneInfosOfZonesAtSameOffset -> {
                            if (zoneInfosOfZonesAtSameOffset.size() == 1) {
                                return zoneInfosOfZonesAtSameOffset.stream();
                            }
                            return zoneInfosOfZonesAtSameOffset.stream()
                                    .filter(zoneInfo -> !zoneInfo.zoneId.startsWith("SystemV/") && !zoneInfo.zoneId.startsWith("Etc/"));
                        })
                        .sorted(Comparator.comparing(ZoneInfo::averageOffset).thenComparing(ZoneInfo::zoneId))
                        .map(ZoneInfo::zoneId)
                        .collect(Collectors.joining("\n")));
    }

    private record ZoneInfo(int juneOffset, int decemberOffset, String zoneId) {
        public ZoneInfo(String zoneId) {
            this(
                    ZonedDateTime.of(JUNE_DATE, ZoneId.of(zoneId)).getOffset().getTotalSeconds() / 60,
                    ZonedDateTime.of(DECEMBER_DATE, ZoneId.of(zoneId)).getOffset().getTotalSeconds() / 60,
                    zoneId
            );
        }

        public String zoneOffsets() {
            return juneOffset + "/" + decemberOffset;
        }

        public int averageOffset() {
            return (juneOffset + decemberOffset) / 2;
        }
    }
}
